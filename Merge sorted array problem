#MERGE SORTED ARRAY
#DESCRIPTION: You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order.The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        a = m - 1  #last actual number in nums1
        b = n - 1  #last actual number in nums2
        c = m + n - 1  #last index of nums1 (-1 since indexes start from 0 in python)

        while a >= 0 and b >= 0:
            if nums1[a] > nums2[b]: #compares current numbers in nums1 and nums2
                # nums1[i] is bigger, so place it at the end of nums1
                nums1[c] = nums1[a] #if the last number in nums1 is bigger than the last number in nums2, it gets replaced in the last index of nums1
                a -= 1  #shifts backwards in nums1 as loop continues
            else:
                nums1[c] = nums2[b] #if the last number in nums2 is bigger or equal, apply the same logic
                b -= 1
            c -= 1  # index pointer moves backwards

        while b >= 0: #copies the left over numbers from nums2 into nums1 
            nums1[c] = nums2[b]
            b -= 1
            c -= 1

#notes: the problem wants an in-place merge into nums1, so a new list shouldnt be created, nums1 should be modified. Merging backwards helps not overwrite exiting elements in nums1 and because nums1 had 0's towards the end. Largest number is compared and placed at the back of nums1 since the arrays are already sorted. 

#example: i = 2 → nums1[i] = 3
#j = 2 → nums2[j] = 6
#k = 5 → compare 3 vs 6 → place 6 at nums1[5]
#new nums1 → [1, 2, 3, 0, 0, 6]
#this is repeated until everything is placed in order
